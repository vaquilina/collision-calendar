/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root.tsx'
import { Route as AuthRouteImport } from './routes/auth.tsx'
import { Route as AppRouteImport } from './routes/app.tsx'
import { Route as AuthIndexRouteImport } from './routes/auth.index.tsx'
import { Route as AppIndexRouteImport } from './routes/app.index.tsx'
import { Route as AuthSignupRouteImport } from './routes/auth.signup.tsx'
import { Route as AuthSigninRouteImport } from './routes/auth.signin.tsx'
import { Route as AppSettingsRouteImport } from './routes/app.settings.tsx'
import { Route as AppPlaygroundRouteImport } from './routes/app.playground.tsx'
import { Route as AppCalendarRouteImport } from './routes/app.calendar.tsx'
import { Route as AppAccountRouteImport } from './routes/app.account.tsx'
import { Route as AppAboutRouteImport } from './routes/app.about.tsx'

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => AuthRoute,
} as any)
const AppSettingsRoute = AppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRoute,
} as any)
const AppPlaygroundRoute = AppPlaygroundRouteImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => AppRoute,
} as any)
const AppCalendarRoute = AppCalendarRouteImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => AppRoute,
} as any)
const AppAccountRoute = AppAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => AppRoute,
} as any)
const AppAboutRoute = AppAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/app': typeof AppRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/app/about': typeof AppAboutRoute
  '/app/account': typeof AppAccountRoute
  '/app/calendar': typeof AppCalendarRoute
  '/app/playground': typeof AppPlaygroundRoute
  '/app/settings': typeof AppSettingsRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/app/': typeof AppIndexRoute
  '/auth/': typeof AuthIndexRoute
}
export interface FileRoutesByTo {
  '/app/about': typeof AppAboutRoute
  '/app/account': typeof AppAccountRoute
  '/app/calendar': typeof AppCalendarRoute
  '/app/playground': typeof AppPlaygroundRoute
  '/app/settings': typeof AppSettingsRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/app': typeof AppIndexRoute
  '/auth': typeof AuthIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/app': typeof AppRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/app/about': typeof AppAboutRoute
  '/app/account': typeof AppAccountRoute
  '/app/calendar': typeof AppCalendarRoute
  '/app/playground': typeof AppPlaygroundRoute
  '/app/settings': typeof AppSettingsRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/app/': typeof AppIndexRoute
  '/auth/': typeof AuthIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/app'
    | '/auth'
    | '/app/about'
    | '/app/account'
    | '/app/calendar'
    | '/app/playground'
    | '/app/settings'
    | '/auth/signin'
    | '/auth/signup'
    | '/app/'
    | '/auth/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/app/about'
    | '/app/account'
    | '/app/calendar'
    | '/app/playground'
    | '/app/settings'
    | '/auth/signin'
    | '/auth/signup'
    | '/app'
    | '/auth'
  id:
    | '__root__'
    | '/app'
    | '/auth'
    | '/app/about'
    | '/app/account'
    | '/app/calendar'
    | '/app/playground'
    | '/app/settings'
    | '/auth/signin'
    | '/auth/signup'
    | '/app/'
    | '/auth/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/'
      fullPath: '/auth/'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof AuthRoute
    }
    '/app/settings': {
      id: '/app/settings'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/playground': {
      id: '/app/playground'
      path: '/playground'
      fullPath: '/app/playground'
      preLoaderRoute: typeof AppPlaygroundRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/calendar': {
      id: '/app/calendar'
      path: '/calendar'
      fullPath: '/app/calendar'
      preLoaderRoute: typeof AppCalendarRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/account': {
      id: '/app/account'
      path: '/account'
      fullPath: '/app/account'
      preLoaderRoute: typeof AppAccountRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/about': {
      id: '/app/about'
      path: '/about'
      fullPath: '/app/about'
      preLoaderRoute: typeof AppAboutRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppAboutRoute: typeof AppAboutRoute
  AppAccountRoute: typeof AppAccountRoute
  AppCalendarRoute: typeof AppCalendarRoute
  AppPlaygroundRoute: typeof AppPlaygroundRoute
  AppSettingsRoute: typeof AppSettingsRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppAboutRoute: AppAboutRoute,
  AppAccountRoute: AppAccountRoute,
  AppCalendarRoute: AppCalendarRoute,
  AppPlaygroundRoute: AppPlaygroundRoute,
  AppSettingsRoute: AppSettingsRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface AuthRouteChildren {
  AuthSigninRoute: typeof AuthSigninRoute
  AuthSignupRoute: typeof AuthSignupRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSigninRoute: AuthSigninRoute,
  AuthSignupRoute: AuthSignupRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
